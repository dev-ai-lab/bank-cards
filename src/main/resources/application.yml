server:
  port: 9000

spring:
  application:
    name: "bank-cards"
  profiles:
    active: "default"

  datasource:
    url: jdbc:h2:mem:testdb
    username: sa
    password: ''
  h2:
    console:
      enabled: true
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true

  config:
    import: "optional:configserver:http://localhost:8071/"

  cloud:
    kubernetes:
      discovery:
        all-namespaces: true # Used when kubernetes discovery server is used
    discovery:
      client:
        health-indicator:
          enabled: false
#eureka:
#  client:
#    fetchRegistry: true # Please fetch content of Eureka server registry for communication purposes (Cache)
#    registerWithEureka: true # Please register yourself with Eureka server
#    serviceUrl:
#      defaultZone: http://localhost:8070/eureka/
#  instance:
#    preferIpAddress: true # By default, bank-cards service will register with registry using hostname. This will need DNS setup. Instead, we set it up using IPAddress. When other services tries to connect with cards, eureka will share the IP address of cards service


# This information will be used by /actuator/info endpoint. This endpoint has to be activated in management.
# Eureka server will use this info (endpoint) to add information to the registered microservice
info:
  app:
    name: bank-cards
    descriptions: Bank cards microservice
    version: 1.0.0

# Data related /actuator/shutdown. We will call this method to shut down the service and test the deregistration from Eureka. It should be activated under management
endpoints:
  shutdown:
    enabled: true

management:
  endpoints:
    web:
      exposure:
        include: "*"
  health:
    readiness-state:
      enabled: true
    liveness-state:
      enabled: true
  endpoint:
    shutdown:
      enabled: true
    health:
      probes:
        enabled: true
  info:
    env:
      enabled: true
  metrics:
    tags:
      application: ${spring.application.name}

logging:
  level:
    com:
      bank:
        cards: DEBUG
  # Used by open telemetry %5p: log severity (info, error, debug). Trace-id and span-id generated by open telemetry will be inserted here.
  pattern:
    level: "%5p [${spring.application.name},%X{trace_id},%X{span_id}]"